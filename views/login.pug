//include mixins
-
    var Elevation = [
        "none"
        ,"0 2px 2px 0 rgba(0, 0, 0, 0.14),0 1px 5px 0 rgba(0, 0, 0, 0.12),0 3px 1px -2px rgba(0, 0, 0, 0.2)"
        ,"0 4px 5px 0 rgba(0, 0, 0, 0.14),0 1px 10px 0 rgba(0, 0, 0, 0.12),0 2px 4px -1px rgba(0, 0, 0, 0.4)"
        ,"0 6px 10px 0 rgba(0, 0, 0, 0.14),0 1px 18px 0 rgba(0, 0, 0, 0.12),0 3px 5px -1px rgba(0, 0, 0, 0.4)"
        ,"0 8px 10px 1px rgba(0, 0, 0, 0.14),0 3px 14px 2px rgba(0, 0, 0, 0.12),0 5px 5px -3px rgba(0, 0, 0, 0.4)"
        ,"0 16px 24px 2px rgba(0, 0, 0, 0.14),0  6px 30px 5px rgba(0, 0, 0, 0.12),0  8px 10px -5px rgba(0, 0, 0, 0.4)"
    ]
doctype html
html
    head
        title MusicEx | Apoorv Verma
        meta(name='viewport', content='width=device-width, initial-scale=1')
        link(href="/assets/flex-layout.css",rel="stylesheet")
        link(href='https://fonts.googleapis.com/css?family=Raleway|Poiret+One|Roboto:400,200,100', rel='stylesheet', type='text/css')
        script(src="/module/jquery/dist/jquery.min.js")
        script(src="https://use.fontawesome.com/9e1074d69a.js")
        style.
            html,body,head{border: 0;padding: 0;margin: 0;font-family: 'Roboto', sans-serif;}*{box-sizing:border-box}
            h1,h2 {font-weight: 200;margin:0}
            body {color:white;background-color:#363F45}
            button {cursor:pointer}
            *::-webkit-scrollbar {width: 8px}
            *::-webkit-scrollbar-track {background-color: rgba(255,255,255,.08);box-shadow: inset 0 0 6px rgba(255,255,255,0.1)}
            *::-webkit-scrollbar-thumb {background-color: rgba(255,255,255,.35);transition: background-color .25s}
            *::-webkit-scrollbar-thumb:hover {background-color: rgba(255,255,255,.45)}
    body#app.fullbleed.layout.vertical
        main.flex.layout.vertical.center-center
            header#TitleWrapper
                h2 Welcome to
                h1 Music Ex#[small plorer]
                small#Success
                    i.fa.fa-cog.fa-spin.fa-3x
                    .Text
            button#Login(onclick="app.openLogin()") Login
        footer#Modal.fit.layout.vertical.center-center
            section.Modal-Body
                h2 Please fill in your details [#[span#LoginType]]:
                input(placeholder="Name",name="name")
                input(type="email",placeholder="Email",name="email")
                input#psw(type="password",placeholder="Password",name="password")
                aside#ModalError.layout.vertical.center-center
                button.fab(onclick="app.submitForm()"): i.fa.fa-check.fa-2x
        style.
            #TitleWrapper {text-align:center}
            #TitleWrapper > h1 {margin: .67em 0;font-size:3em}
            #TitleWrapper > h1 > small {font-size: .4em}
            body:not(.modal) > #Modal {display:none;background: rgba(0,0,0,0)}
            #Success:not(.show) {display:none}
            #Success {font-size: 1em;position: absolute;left: 50%;transform: translateX(-50%);}
            #Success > .Text {margin-top: 1em}
            #Modal {background: rgba(0,0,0,.45);transition: background .5s}
            #Modal .Modal-Body {padding: 1em 1em 2.5em;position: relative;max-width: 25em;background: rgba(255,255,255,.14);color: white;border-radius: 5px}
            #Modal .Modal-Body h2 {margin-bottom: 1em}
            #Modal .Modal-Body input {font-family:Raleway;width: 100%;margin: .25em 0;padding: .5em;font-size: 1em;background: rgba(0, 0, 0, 0.42);color: white;outline: none;border: 0;transition: box-shadow .25s}
            #Modal .Modal-Body input:focus {box-shadow: inset 0 0 8px 0px rgba(0,0,0,.43)}
            #Modal .Modal-Body input.Invalid {box-shadow: 0 0 9px 1px #fb3f31}
                .Modal-Body.login input[name='name'] {display:none}
                .Modal-Body .fab {padding: .9em;border-radius: 50%;border: 0;background-color: #F44336;color: white;position: absolute;bottom: 0;right: 1em;transform: translateY(50%)}
            #ModalError:not(.show) {height:0}
            #ModalError {padding: 0 1em;transition: height .35s;overflow: hidden;height: 5em;margin-top: .15em;color: white;background: rgba(244, 67, 54, 0.58);font-size: .9em;text-align: center}
            .fab {transition:box-shadow .25s;cursor:pointer;outline: 0;box-shadow: !{Elevation[1]}}
            .fab:focus {box-shadow: !{Elevation[2]}}
            .fab:active {box-shadow: !{Elevation[4]}}
            .el-1 {box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2)}
            .el-2 {box-shadow: 0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12),0 3px 5px -1px rgba(0,0,0,.4)}
            body.modal > main {filter: blur(3px)}
            #Error {background-color: rgba(255,0,0,.45)}
            #Login {position:absolute;top:1em;right:1em;color: #B7B7B7;border:0;padding:.5em 1em;outline:none;background:transparent;font-size:1em;text-transform: uppercase;transition: background-color .25s}
            #Login:active {box-shadow: 0 0 10px 0px rgba(0, 0, 0, 0.3)}
            #Login:hover {background: rgba(255, 255, 255, 0.08)}
        script
            :babel
                var sleep = t => new Promise(res => setTimeout(res,t))
                var app = {root: $("#app"), $:{},faux:_=>_,arr: a => Array.prototype.slice.apply(a)};
                //======STATIC=BINDING===========================|
                ["Modal","LoginType","psw","Success","ModalError"].forEach(i => {app.$[i] = $("#"+i,app.root)})
                //======FUNCTIONAL===============================|
                const pm = app.propogateModal = sec => {
                    const force = !sec;
                    if (force || sec=="state") {
                        const classy = s => s.replace(/ /g,'').toLowerCase()
                        app.$.LoginType.text(app.state)
                        $(".Modal-Body", app.$.Modal).addClass(classy(app.state)).removeClass(classy(app.otherState(app.state)))
                    }
                }
                app.openLogin = _ => app.root.addClass("modal")
                app.closeLogin = _ => app.root.removeClass("modal")
                app.toggleState = _ => {app.state = app.otherState(app.state);pm("state")}
                app.otherState = s => s=="Log In"?"Sign Up":"Log In"
                app.submitForm = _ => app.validateData() && app._submitForm()
                app.validateData = _ => {
                    const ck = $("input:visible", app.$.Modal)
                    const inv = ck.filter((_,e) => !$(e).val() || !app.validateType($(e))).addClass("Invalid")
                    ck.not(inv).removeClass("Invalid")
                    return !inv.length
                }
                app.validateType = e => {
                    switch (e.attr("name")) {
                        case "name":
                            return /[\w\.\']{2,} [\w\.\']{2,}/g.test(e.val())
                        case "email":
                            return /[\w\.\_\%\+\-]{2,}@[\w\.\_\+\-]{2,}\.\w{2,}/g.test(e.val())
                        default:
                            return true
                    }
                }
                app.showLoginErr = e => {
                    const m = app.$.ModalError
                    m.addClass("show").text(e)
                    sleep(1500).then(_ => m.removeClass("show"))
                }
                app._submitForm = _ => {
                    const data = $("input:visible", app.$.Modal).serialize()
                    $.ajax({
                        url: "/api/auth/"+(app.state=="Log In"?1:2),
                        data: data,
                        method: "POST",
                        success: (data) => {
                            $(".Text", app.$.Success.addClass("show")).text(data.message)
                            app.closeLogin()
                            sleep(1500).then(_ => {window.location = "/"})
                        },
                        error: x => {
                            const err = JSON.parse(x.responseText).message
                            if (err.indexOf("Incorrect email")+1) {app.showLoginErr("Account Does not Exist, switching to Sign Up");return app.toggleState()}
                            app.showLoginErr(err)
                        },
                    })
                }
                //======STATIC=DATA==============================|
                app.state = "Log In"
                //======EVENT=BINDING============================|
                app.$.Modal.click(e => {
                    if (!app.root.hasClass("modal")) {return}
                    if (!$(e.target).closest($(".Modal-Body", app.$.Modal)).length) {app.closeLogin()}
                })
                $("input",app.$.Modal).keyup(e => {if (e.keyCode != 13) {return}app.submitForm()})
                //======INITIALIZERS=============================|
                pm()
                
